int a;
int b;

int[3] a;
int[4] b;

tuple(int, int) a;

class A {
  int a;
  int b;
  
  constructor() {
    this->a = a;
    this->b = b;
  }
  
  something() {
    this->a = 3;
    this->b = 4;
  }
};

template<T> {
  class item {
    T body;
    item *next;
  };
  
  class list {
    item *head;
    
    insert(T item) {
      this->head->next = item;
      this->head = item;
    }
  };
};

template <T, int size> {
  class array_buffer {
    T 
  };
}

instantiate list<int>;
instantiate array_buffer<int, 32>;

array_buffer<int, 32> test;

class vec3 {
  float x;
  float y;
  
  constructor(float x, float y) {
    this->x = x;
    this->y = y;
  }
};

A a;

fn main() -> tuple(int, int) {
  
}

fn something(tuple(int, int), A *a) {
  
}
